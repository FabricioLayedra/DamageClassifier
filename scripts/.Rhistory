#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,1:13]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,1:13]
ytest = test.data[,ncol(df.scale)]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population -> NULL
df.scale$damage_ratio -> NULL
df.scale$total_houses -> NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,1:13]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,1:13]
ytest = test.data[,ncol(df.scale)]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population = NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,1:13]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,1:13]
ytest = test.data[,ncol(df.scale)]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
dim(df.scale)
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population = NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[1:13,]
ytrain = train.data[ncol(df.scale),]
Xtest = test.data[1:13,]
ytest = test.data[ncol(df.scale),]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
dim(ytrain)
train.data[14,]
train.data
train.data[10,]
train.data[,ncol(train.data)]
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population = NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,1:13]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,1:13]
ytest = test.data[,ncol(df.scale)]
train.data[1:13,]
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population = NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,-10]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,-10]
ytest = test.data[,ncol(df.scale)]
Xtrain
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population = NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
df.scale
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population <- NULL
dim(df.scale)
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
dim(df.scale)
df.scale$population <- NULL
dim(df.scale)
View(df.scale)
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=FALSE)
#supressMessages()
df.scale$population <- NULL
dim(df.scale)
head(df.scale)
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
df.scale
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,-7]
ytrain = train.data[,ncol(df.scale)]
Xtest = test.data[,-7]
ytest = test.data[,ncol(df.scale)]
dim(ytest)
ytest
test.data
Xtrain
Xtest
ytain
ytrain
dim(ytrain)
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,-7]
ytrain = train.data[,7]
Xtest = test.data[,-7]
ytest = test.data[,7]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
ytest
test.data[,5]
test.data[,7]
train.data[,7]
train.data[,-7]
dim(Xtrain)
dim(train.data[,6:7])
dim(train.data[,7])
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
df.scale$parroquia = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,-7]
ytrain = train.data[,7]
Xtest = test.data[,-7]
ytest = test.data[,7]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
df.scale$parroquia = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
#reg <- lm(damaged_houses ~ ., data = train.data)
#summary(reg)
#tr<- data.frame(train.data$medv, reg$fitted.values, reg$residuals)
#head(tr)
#prediccion
#pred_training <- predict(reg, newdata = test.data)
#vl.res <- data.frame(test.data$medv, pred_training, residuals = test.data$medv - pred_training)
#head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$medv)
#compute error for test
#pred <- predict(reg,newdata = test.data)
#accuracy(exp(pred), test.data$medv)
Xtrain = train.data[,-6]
ytrain = train.data[,6]
Xtest = test.data[,-6]
ytest = test.data[,6]
#Ridge regression
library(glmnet)
#multinomial with ridge regression
model <- cv.glmnet(Xtrain, ytrain,family = "multinomial", alpha = 1, nfolds=3, standardize=TRUE)
#predict
predNumbers <- predict(model,Xtest,type="response", s=model$lambda.min)
#accuracy
conf_mat <- table(predNumbers,ytest)
acc <- sum(diag(conf_mat)) / nrow(test.data)
acc
#library(caret)
setwd("/home/belen/github/DamageClassifier/scripts/")
set.seed(12345)
df.scale = read.csv("../data/features_parroquia_normalized.csv", sep=",", as.is=TRUE, header=TRUE)
#supressMessages()
df.scale$population <- NULL
df.scale$damage_ratio = NULL
df.scale$total_houses = NULL
df.scale$parroquia = NULL
#centering, scaling of input features
#df.scale<-cbind(scale(df[1:13]),df[14])
#do data partitioning
#inTrain<-createDataPartition(y=house.scale$medv ,p=0.70, list=FALSE)
#train.data <- house.scale[inTrain,]
#test.data <- house.scale[-inTrain]
inTrain = sample(1:nrow(df.scale),dim(df.scale)[1]*0.80)
train.data = df.scale[inTrain,]
test.data = df.scale[-inTrain,]
#modelo lineal
set.seed(1234)
reg <- lm(damaged_houses ~ ., data = train.data)
summary(reg)
tr<- data.frame(train.data$damaged_houses, reg$fitted.values, reg$residuals)
head(tr)
#prediccion
pred_training <- predict(reg, newdata = test.data)
vl.res <- data.frame(test.data$damaged_houses, pred_training, residuals = test.data$damaged_houses - pred_training)
head(vl.res)
library(forecast)
#compute accuracy on training test
#accuracy(exp(reg$fitted.values),train.data$damaged_houses)
#compute error for test
pred <- predict(reg,newdata = test.data)
accuracy(pred, test.data$damaged_houses)
plot(reg)
